@page "/promotions/create"
@using Microsoft.EntityFrameworkCore
@using BookNook.Domain
@inject IDbContextFactory<BookNook.Data.BookNookContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Promotion</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Promotion" OnValidSubmit="AddPromotion" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="promocode" class="form-label">PromoCode:</label> 
                <InputText id="promocode" @bind-Value="Promotion.PromoCode" class="form-control" /> 
                <ValidationMessage For="() => Promotion.PromoCode" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Promotion.Description" class="form-control" /> 
                <ValidationMessage For="() => Promotion.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="discountpercentage" class="form-label">DiscountPercentage:</label> 
                <InputNumber id="discountpercentage" @bind-Value="Promotion.DiscountPercentage" class="form-control" /> 
                <ValidationMessage For="() => Promotion.DiscountPercentage" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="startdate" class="form-label">StartDate:</label> 
                <InputDate id="startdate" @bind-Value="Promotion.StartDate" class="form-control" /> 
                <ValidationMessage For="() => Promotion.StartDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="enddate" class="form-label">EndDate:</label> 
                <InputDate id="enddate" @bind-Value="Promotion.EndDate" class="form-control" /> 
                <ValidationMessage For="() => Promotion.EndDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="applicableto" class="form-label">ApplicableTo:</label> 
                <InputText id="applicableto" @bind-Value="Promotion.ApplicableTo" class="form-control" /> 
                <ValidationMessage For="() => Promotion.ApplicableTo" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/promotions">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Promotion Promotion { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddPromotion()
    {
        using var context = DbFactory.CreateDbContext();
        context.Promotion.Add(Promotion);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/promotions");
    }
}
