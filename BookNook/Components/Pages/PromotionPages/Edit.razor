@page "/promotions/edit"
@using Microsoft.EntityFrameworkCore
@using BookNook.Domain
@inject IDbContextFactory<BookNook.Data.BookNookContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Promotion</h2>
<hr />
@if (Promotion is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Promotion" OnValidSubmit="UpdatePromotion" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Promotion.Id" value="@Promotion.Id" />
                <div class="mb-3">
                    <label for="promocode" class="form-label">PromoCode:</label>
                    <InputText id="promocode" @bind-Value="Promotion.PromoCode" class="form-control" />
                    <ValidationMessage For="() => Promotion.PromoCode" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Promotion.Description" class="form-control" />
                    <ValidationMessage For="() => Promotion.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="discountpercentage" class="form-label">DiscountPercentage:</label>
                    <InputNumber id="discountpercentage" @bind-Value="Promotion.DiscountPercentage" class="form-control" />
                    <ValidationMessage For="() => Promotion.DiscountPercentage" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="startdate" class="form-label">StartDate:</label>
                    <InputDate id="startdate" @bind-Value="Promotion.StartDate" class="form-control" />
                    <ValidationMessage For="() => Promotion.StartDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="enddate" class="form-label">EndDate:</label>
                    <InputDate id="enddate" @bind-Value="Promotion.EndDate" class="form-control" />
                    <ValidationMessage For="() => Promotion.EndDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="applicableto" class="form-label">ApplicableTo:</label>
                    <InputText id="applicableto" @bind-Value="Promotion.ApplicableTo" class="form-control" />
                    <ValidationMessage For="() => Promotion.ApplicableTo" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/promotions">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Promotion? Promotion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Promotion ??= await context.Promotion.FirstOrDefaultAsync(m => m.Id == Id);

        if (Promotion is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdatePromotion()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Promotion!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PromotionExists(Promotion!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/promotions");
    }

    private bool PromotionExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Promotion.Any(e => e.Id == id);
    }
}
